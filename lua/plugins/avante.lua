return {
  --   {
  --     "yetone/avante.nvim",
  --     event = "VeryLazy",
  --     version = false, -- Never set this value to "*"! Never!
  --     opts = {
  --       -- add any opts here
  --       -- for example
  --       provider = "openai",
  --       openai = {
  --         endpoint = "https://api.openai.com/v1",
  --         model = "gpt-4o", -- your desired model (or use gpt-4o, etc.)
  --         timeout = 30000, -- Timeout in milliseconds, increase this for reasoning models
  --         temperature = 0,
  --         max_completion_tokens = 16000, -- Increase this to include reasoning tokens (for reasoning models)
  --         --reasoning_effort = "medium", -- low|medium|high, only used for reasoning models
  --       },
  --     },
  --     behaviour = {
  --       auto_suggestions = true,
  --     },
  --     -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
  --     build = "make",
  --     -- build = "powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false" -- for windows
  --     dependencies = {
  --       "nvim-treesitter/nvim-treesitter",
  --       "stevearc/dressing.nvim",
  --       "nvim-lua/plenary.nvim",
  --       "MunifTanjim/nui.nvim",
  --       --- The below dependencies are optional,
  --       "echasnovski/mini.pick", -- for file_selector provider mini.pick
  --       "nvim-telescope/telescope.nvim", -- for file_selector provider telescope
  --       "hrsh7th/nvim-cmp", -- autocompletion for avante commands and mentions
  --       "ibhagwan/fzf-lua", -- for file_selector provider fzf
  --       "nvim-tree/nvim-web-devicons", -- or echasnovski/mini.icons
  --       "zbirenbaum/copilot.lua", -- for providers='copilot'
  --       {
  --         -- support for image pasting
  --         "HakonHarnes/img-clip.nvim",
  --         event = "VeryLazy",
  --         opts = {
  --           -- recommended settings
  --           default = {
  --             embed_image_as_base64 = false,
  --             prompt_for_file_name = false,
  --             drag_and_drop = {
  --               insert_mode = true,
  --             },
  --             -- required for Windows users
  --             use_absolute_path = true,
  --           },
  --         },
  --       },
  --       {
  --         -- Make sure to set this up properly if you have lazy=true
  --         "MeanderingProgrammer/render-markdown.nvim",
  --         opts = {
  --           file_types = { "markdown", "Avante" },
  --         },
  --         ft = { "markdown", "Avante" },
  --       },
  --     },
  --   },
  --   {
  --     "saghen/blink.cmp",
  --     version = not vim.g.lazyvim_blink_main and "*",
  --     build = vim.g.lazyvim_blink_main and "cargo build --release",
  --     opts_extend = {
  --       "sources.completion.enabled_providers",
  --       "sources.compat",
  --       "sources.default",
  --     },
  --     dependencies = {
  --       "Kaiser-Yang/blink-cmp-avante",
  --       "rafamadriz/friendly-snippets",
  --       -- add blink.compat to dependencies
  --       {
  --         "saghen/blink.compat",
  --         optional = true, -- make optional so it's only enabled if any extras need it
  --         opts = {},
  --         version = not vim.g.lazyvim_blink_main and "*",
  --       },
  --     },
  --     event = "InsertEnter",
  --
  --     ---@module 'blink.cmp'
  --     ---@type blink.cmp.Config
  --     opts = {
  --       snippets = {
  --         expand = function(snippet, _)
  --           return LazyVim.cmp.expand(snippet)
  --         end,
  --       },
  --       appearance = {
  --         -- sets the fallback highlight groups to nvim-cmp's highlight groups
  --         -- useful for when your theme doesn't support blink.cmp
  --         -- will be removed in a future release, assuming themes add support
  --         use_nvim_cmp_as_default = false,
  --         -- set to 'mono' for 'Nerd Font Mono' or 'normal' for 'Nerd Font'
  --         -- adjusts spacing to ensure icons are aligned
  --         nerd_font_variant = "mono",
  --       },
  --       completion = {
  --         accept = {
  --           -- experimental auto-brackets support
  --           auto_brackets = {
  --             enabled = true,
  --           },
  --         },
  --         menu = {
  --           draw = {
  --             treesitter = { "lsp" },
  --           },
  --         },
  --         documentation = {
  --           auto_show = true,
  --           auto_show_delay_ms = 200,
  --         },
  --         ghost_text = {
  --           enabled = vim.g.ai_cmp,
  --         },
  --       },
  --
  --       -- experimental signature help support
  --       -- signature = { enabled = true },
  --
  --       sources = {
  --         -- adding any nvim-cmp sources here will enable them
  --         -- with blink.compat
  --         compat = {},
  --         default = { "avante", "lsp", "path", "snippets", "buffer" },
  --         providers = {
  --           avante = {
  --             module = "blink-cmp-avante",
  --             name = "Avante",
  --             opts = {
  --               -- options for blink-cmp-avante
  --             },
  --           },
  --         },
  --       },
  --
  --       cmdline = {
  --         enabled = false,
  --       },
  --
  --       keymap = {
  --         preset = "enter",
  --         ["<C-y>"] = { "select_and_accept" },
  --       },
  --     },
  --     ---@param opts blink.cmp.Config | { sources: { compat: string[] } }
  --     config = function(_, opts)
  --       -- setup compat sources
  --       local enabled = opts.sources.default
  --       for _, source in ipairs(opts.sources.compat or {}) do
  --         opts.sources.providers[source] = vim.tbl_deep_extend(
  --           "force",
  --           { name = source, module = "blink.compat.source" },
  --           opts.sources.providers[source] or {}
  --         )
  --         if type(enabled) == "table" and not vim.tbl_contains(enabled, source) then
  --           table.insert(enabled, source)
  --         end
  --       end
  --
  --       -- add ai_accept to <Tab> key
  --       if not opts.keymap["<Tab>"] then
  --         if opts.keymap.preset == "super-tab" then -- super-tab
  --           opts.keymap["<Tab>"] = {
  --             require("blink.cmp.keymap.presets")["super-tab"]["<Tab>"][1],
  --             LazyVim.cmp.map({ "snippet_forward", "ai_accept" }),
  --             "fallback",
  --           }
  --         else -- other presets
  --           opts.keymap["<Tab>"] = {
  --             LazyVim.cmp.map({ "snippet_forward", "ai_accept" }),
  --             "fallback",
  --           }
  --         end
  --       end
  --
  --       -- Unset custom prop to pass blink.cmp validation
  --       opts.sources.compat = nil
  --
  --       -- check if we need to override symbol kinds
  --       for _, provider in pairs(opts.sources.providers or {}) do
  --         ---@cast provider blink.cmp.SourceProviderConfig|{kind?:string}
  --         if provider.kind then
  --           local CompletionItemKind = require("blink.cmp.types").CompletionItemKind
  --           local kind_idx = #CompletionItemKind + 1
  --
  --           CompletionItemKind[kind_idx] = provider.kind
  --           ---@diagnostic disable-next-line: no-unknown
  --           CompletionItemKind[provider.kind] = kind_idx
  --
  --           ---@type fun(ctx: blink.cmp.Context, items: blink.cmp.CompletionItem[]): blink.cmp.CompletionItem[]
  --           local transform_items = provider.transform_items
  --           ---@param ctx blink.cmp.Context
  --           ---@param items blink.cmp.CompletionItem[]
  --           provider.transform_items = function(ctx, items)
  --             items = transform_items and transform_items(ctx, items) or items
  --             for _, item in ipairs(items) do
  --               item.kind = kind_idx or item.kind
  --               item.kind_icon = LazyVim.config.icons.kinds[item.kind_name] or item.kind_icon or nil
  --             end
  --             return items
  --           end
  --
  --           -- Unset custom prop to pass blink.cmp validation
  --           provider.kind = nil
  --         end
  --       end
  --
  --       require("blink.cmp").setup(opts)
  --     end,
  --   },
}
